CheckAgreement(Round1, Round2)
Round1[c(1:500)[Rerun1],] <- RerunResult1
sum(as.numeric(Round1$document_id == Round2$document_id))/500
CheckAgreement(Round1, Round2)
write.csv(Round1, "~/Dropbox/STM_Facebook/Final_Results/Version2/V2stm1R1.csv")
write.csv(Round2, "~/Dropbox/STM_Facebook/Final_Results/Version2/V2stm1R2.csv")
write.csv(Round1, "~/Dropbox/STM_Facebook/Final_Results/Version2b/V2bstm1R1.csv")
write.csv(Round2, "~/Dropbox/STM_Facebook/Final_Results/Version2b/V2bstm1R2.csv")
rm(list=ls())
library('sentimentIt')
library('jsonlite')
library('httr')
load('~/Dropbox/STM_Facebook/Final_Results/Version2/V2stm1ARC.Rdata')
source("~/Dropbox/STM_Facebook/Final_Results/GetAnswer.R")
source("~/Dropbox/STM_Facebook/Final_Results/CheckAgreement.R")
Round1 <- GetAnswer('~/Dropbox/STM_Facebook/Original_Results/Result1079.csv')
Round1$CorrectDummy <- as.numeric(Round1$document_id == V2stm1ARC[[2]][,4])
sum(Round1$CorrectDummy) #178
Round2 <- GetAnswer('~/Dropbox/STM_Facebook/Original_Results/Result1082.csv')
Round2$CorrectDummy <- as.numeric(Round2$document_id == V2stm1ARC[[2]][,4])
sum(Round2$CorrectDummy) #180
Round2 <- GetAnswer('~/Dropbox/STM_Facebook/Original_Results/Result1082.csv')
Rerun2 <- Round2$worker_id %in% c("A383I2LLYX9LJM")
Round1 <- GetAnswer('~/Dropbox/STM_Facebook/Original_Results/Result1079.csv')
RerunResult2 <- GetAnswer('~/Dropbox/STM_Facebook/Original_Results/Result1086.csv')
Round2[c(1:500)[Rerun2],] <- RerunResult2
sum(as.numeric(Round1$document_id == Round2$document_id))/500
write.csv(Round1, "~/Dropbox/STM_Facebook/Final_Results/Version2/V2stm1R1.csv")
write.csv(Round2, "~/Dropbox/STM_Facebook/Final_Results/Version2/V2stm1R2.csv")
rm(list = ls())
load('~/Dropbox/STM_Facebook/Final_Results/Version2b/V2bstm1ARC.Rdata')
V2bstm1R1 <- read.csv('~/Dropbox/STM_Facebook/Final_Results/Version2b/V2bstm1R1.csv')
V2bstm1R2 <- read.csv('~/Dropbox/STM_Facebook/Final_Results/Version2b/V2bstm1R2.csv')
V2bstm1 <- rbind(V2bstm1R1, V2bstm1R2)
V2bstm1$CorrectDummy <- as.numeric(V2bstm1$document_id == rep(V2bstm1ARC[[2]][,4], 2))
sum(V2bstm1$CorrectDummy) #905
Bytopics20 <- function(Answer, Topic){
Bytopics <- t(table(Answer$CorrectDummy,
paste0("Topic", Topic)))
Bytopics <- Bytopics[c('Topic1','Topic2','Topic3','Topic4','Topic5',
'Topic6','Topic7','Topic8','Topic9','Topic10',
'Topic11','Topic12','Topic13','Topic14','Topic15',
'Topic16','Topic17','Topic18','Topic19','Topic20'),]
rate <- Bytopics[,2]/(Bytopics[,1]+Bytopics[,2])
Bytopics <- cbind(Bytopics, rate)
colnames(Bytopics) <- c("Wrong HITs", "Correct HITs", "Correct Rate")
return(Bytopics)
}
V2bstm1ByTopics <- Bytopics20(V2bstm1, rep(V2bstm1ARC[[1]][,6], 2))
stargazer(V2bstm1ByTopics)
rm(list = ls())
setwd('~/Dropbox/Summer_Courses/workshopWashU/network2018_hw1')
load("nigeria.rda")
View(nigeria)
head(nigeria)
range(nigeria$year)
years = sort(unique(nigeria$year))
countries = with(nigeria, intersect(sender, receiver))
n <- length(countries)
adjMat <- matrix(0, nrow = n, ncol = n, dimnames = list(countries, countries))
conflictlist  <- lapply(years, function(t){
slice <- nigeria[nigeria$year == t,]
CflCases <- slice[slice$conflict == 1,]
for(i in 1:nrow(CflCases)){
adjMat[as.character(CflCases[i,]$sender), as.character(CflCases[i,]$receiver)] <- 1
}
})
View(conflictlist[[1]])
class(conflictlist[[1]])
conflictlist[[1]]
conflictlist  <- lapply(years, function(t){
slice <- nigeria[nigeria$year == t,]
CflCases <- slice[slice$conflict == 1,]
for(i in 1:nrow(CflCases)){
adjMat[as.character(CflCases[i,]$sender), as.character(CflCases[i,]$receiver)] <- 1
}
return(adjMat)
})
names(warlist) <- years
names(conflictlist) <- years
conflictlist[[1]]
sum(conflictlist[[1]])
table(nigeria[nigeria$year == 2000\,])
table(nigeria[nigeria$year == 2000,])
table(nigeria$conflict[nigeria$year == 2000])
table(nigeria$conflict[nigeria$year == 2016])
sum(conflictlist[[17]])
library('sna')
g = graph_from_adjacency_matrix(conflictlist,
mode='directed',
weighted=TRUE,
diag=FALSE
)
library('igraph')
g = graph_from_adjacency_matrix(conflictlist,
mode='directed',
weighted=TRUE,
diag=FALSE
)
g <- graph_from_adjacency_matrix(conflictlist[[1]],
mode='directed',
weighted=TRUE,
diag=FALSE
)
eigen_centrality(g, directed = TRUE)
g2 <- graph_from_adjacency_matrix(conflictlist[[2]],
mode='directed',
weighted=TRUE,
diag=FALSE
)
mean(eigen_centrality(g, directed = TRUE), eigen_centrality(g2, directed = TRUE))
eigen_centrality(g, directed = TRUE)
eigen_centrality(g, directed = TRUE)$vector
mean(eigen_centrality(g, directed = TRUE)$vector, eigen_centrality(g2, directed = TRUE)$vector)
View(adjMat)
conflictlist  <- lapply(years, function(t){
slice <- nigeria[nigeria$year == t,]
CflCases <- slice[slice$conflict == 1,]
for(i in 1:nrow(CflCases)){
adjMat[as.character(CflCases[i,]$sender), as.character(CflCases[i,]$receiver)] <- 1
diag(adjMat) <- NA
}
return(adjMat)
})
names(conflictlist) <- years
View(adjMat)
g2 <- graph_from_adjacency_matrix(conflictlist[[2]],
mode='directed',
weighted=TRUE,
diag=FALSE
)
eigen_centrality(g2, directed = TRUE)$vector
eigen(conflictlist[[1]])
conflictlist  <- lapply(years, function(t){
slice <- nigeria[nigeria$year == t,]
CflCases <- slice[slice$conflict == 1,]
for(i in 1:nrow(CflCases)){
adjMat[as.character(CflCases[i,]$sender), as.character(CflCases[i,]$receiver)] <- 1
}
return(adjMat)
})
names(conflictlist) <- years
# -------- 2. Measurements & Community detection
eigen(conflictlist[[1]])
EV <- eigen(conflictlist[[1]])
max(EV$values)
degree(g)
max(degree(g))
graph <- graph_from_adjacency_matrix(conflictlist[[17]],
mode='directed',
weighted=TRUE,
diag=FALSE
)
max(degree(graph))
degree(graph)
eigen_centrality(graph, directed = TRUE)$vector
max(eigen_centrality(graph, directed = TRUE)$vector)
graph <- graph_from_adjacency_matrix(conflictlist[[1]],
mode='directed',
weighted=TRUE,
diag=FALSE
)
max(degree(graph))
max(eigen_centrality(graph, directed = TRUE)$vector)
which.max(degree(graph))
which.max(eigen_centrality(graph, directed = TRUE)$vector)
?blockmodel
blockmodel(conflictlist)
View(nigeria)
eq <- equiv.clust(graph)
eq <- equiv.clust(conflictlist[[1]])
blockmodel(conflictlist, ec = eq, k = 3)
blockmodel(conflictlist, ec = eq)
blockmodel(conflictlist, eq, k = 3)
blockmodel(conflictlist, eq, h = 3)
blockmodel(conflictlist[[1]], eq, k = 3)
eq <- equiv.clust(conflictlist)
blockmodel(conflictlist, eq, k = 3)
plot(eq,hang=-1)
eq <- equiv.clust(conflictlist[[1]])
plot(eq,hang=-1)
Conflictblocks3 <- blockmodel(conflictlist, eq, k = 3)
eq <- equiv.clust(conflictlist)
plot(eq,hang=-1)
Conflictblocks3 <- blockmodel(conflictlist, eq, k = 3)
Conflictblocks3$block.membership
Conflictblocks3
countries[c(17, 21)]
Conflictblocks2 <- blockmodel(conflictlist, eq, k = 2)
Conflictblocks2$block.membership
Conflictblocks2$order.vector
Conflictblocks3$block.membership
countries[c(17, 21)]
Conflictblocks4 <- blockmodel(conflictlist, eq, k = 4)
Conflictblocks4$block.membership
Conflictblocks4
countries[22]
Conflictblocks4$block.content
Conflictblocks4$order.vector
NodeCls4 <- Conflictblocks4$block.membership
NodeCls3 <- Conflictblocks3$block.membership
NodeCls2 <- Conflictblocks2$block.membership
Conflictblocks5 <- blockmodel(conflictlist, eq, k = 5)
NodeCl54 <- Conflictblocks5$block.membership
NodeCl54
Conflictblocks5
countries[6]
countries[17]
countries[37]
NodeCls4
countries[37]
NodeCls5 <- Conflictblocks5$block.membership
NodeCls4 <- Conflictblocks4$block.membership
NodeCls4
Conflictblocks4
rm(NodeCl54)
Cfl2000 <- conflictlist[[1]]
diag(Cfl2000) <- NA
CflNet <- as.network.matrix(Cfl2000)
class(CflNet)
Mod <- ergm(CflNet ~ edges + mutual)
library('statnet')
Mod <- ergm(CflNet ~ edges + mutual)
summary(Mod)
Mod <- ergm(CflNet ~ edges + nodematch('group') + mutual)
Mod <- ergm(CflNet ~ edges + mutual)
summary(Mod)
mcmc.diagnostics(Mod)
mcmc.diagnostics(Mod)
dev.off()
mcmc.diagnostics(m3)
mcmc.diagnostics(Mod)
summary(Mod)
library('network')
library('cvTools')
install.packages('cvTools')
library('cvTools')
library('PRROC')
install.packages('PRROC')
library('PRROC')
degree <- degree(eq, cmode = 'outdegree')
degree <- sna::degree(eq, cmode = 'outdegree')
eq
g1 <- network(conflictlist[[1]], directed = T)
degree <- sna::degree(g1, cmode = 'outdegree')
degree <- degree(g1, cmode = 'outdegree')
degree <- sna::degree(g1, cmode = 'outdegree')
degree
degree <- ifelse(degree != 0, 1, 0)
cbind(NodeCls2, NodeCls3, NodeCls4, NodeCls5, degree)
ClustNum <- as.data.frame(cbind(NodeCls2, NodeCls3, NodeCls4, NodeCls5, degree))
NROW(ClustNum)
nrow(ClustNum)
folds <- cvFolds(nrow(ClustNum), K = 5)
ClustNum$Pred2 <- rep(0, nrow(ClustNum))
ClustNum$Pred3 <- rep(0, nrow(ClustNum))
ClustNum$Pred4 <- rep(0, nrow(ClustNum))
ClustNum$Pred5 <- rep(0, nrow(ClustNum))
?cvFolds
folds <- cvFolds(nrow(ClustNum), K = 10)
set.seed(1)
folds
folds$subsets
folds$which
set.seed(1)
for (i in 1:10){
train <- ClustNum[folds$subsets[folds$which != i], ]
validation <- clustNum[folds$subsets[folds$which == i], ]
glm2 <- glm(degree ~ NodeCls2, data = train, family = binomial(link = 'logit'))
pred2 <- predict(glm2, newdata = validation, type = 'response')
clustNum[folds$subsets[folds$which == i], ]$Pred2 <- pred2
}
set.seed(1)
for (i in 1:10){
train <- ClustNum[folds$subsets[folds$which != i], ]
validation <- ClustNum[folds$subsets[folds$which == i], ]
glm2 <- glm(degree ~ NodeCls2, data = train, family = binomial(link = 'logit'))
pred2 <- predict(glm2, newdata = validation, type = 'response')
ClustNum[folds$subsets[folds$which == i], ]$Pred2 <- pred2
}
ClustNum
for (i in 1:10){
train <- ClustNum[folds$subsets[folds$which != i], ]
validation <- ClustNum[folds$subsets[folds$which == i], ]
glm2 <- glm(degree ~ NodeCls2, data = train, family = binomial(link = 'logit'))
pred2 <- predict(glm2, newdata = validation, type = 'response')
ClustNum[folds$subsets[folds$which == i], ]$Pred2 <- pred2
glm3 <- glm(degree ~ NodeCls3, data = train, family = binomial(link = 'logit'))
pred3 <- predict(glm3, newdata = validation, type = 'response')
ClustNum[folds$subsets[folds$which == i], ]$Pred3 <- pred3
glm4 <- glm(degree ~ NodeCls4, data = train, family = binomial(link = 'logit'))
pred4 <- predict(glm4, newdata = validation, type = 'response')
ClustNum[folds$subsets[folds$which == i], ]$Pred4 <- pred4
glm5 <- glm(degree ~ NodeCls5, data = train, family = binomial(link = 'logit'))
pred5 <- predict(glm5, newdata = validation, type = 'response')
ClustNum[folds$subsets[folds$which == i], ]$Pred5 <- pred5
}
warnings()
ClustNum
?roc.curve
FG <- ClustNum$Pred2[ClustNum$degree == 1]
BG <- ClustNum$Pred2[ClustNum$degree == 0]
ROC <- roc.curve(FG, BG, curve = T)
PR <- pr.curve(FG, BG, curve = T)
ROC
ROC$auc
ClustNum
for (i in 6:9){
FG <- ClustNum[ClustNum$degree == 1, i]
BG <- ClustNum[ClustNum$degree == 0, i]
ROC[i-5] <- roc.curve(FG, BG, curve = T)
PR[i-5] <- pr.curve(FG, BG, curve = T)
}
for (i in 6:9){
FG <- ClustNum[ClustNum$degree == 1, i]
BG <- ClustNum[ClustNum$degree == 0, i]
ROC[,i-5] <- roc.curve(FG, BG, curve = T)
PR[,i-5] <- pr.curve(FG, BG, curve = T)
}
roc.curve(FG, BG, curve = T)
for (i in 6:9){
FG <- ClustNum[ClustNum$degree == 1, i]
BG <- ClustNum[ClustNum$degree == 0, i]
ROC[[i-5]] <- roc.curve(FG, BG, curve = T)
PR[[,i-5]] <- pr.curve(FG, BG, curve = T)
}
for (i in 6:9){
FG <- ClustNum[ClustNum$degree == 1, i]
BG <- ClustNum[ClustNum$degree == 0, i]
ROC[[i-5]] <- roc.curve(FG, BG, curve = T)
PR[[i-5]] <- pr.curve(FG, BG, curve = T)
}
lapply(ROC, function(t) t$auc)
ROC
for (i in 6:9){
FG <- ClustNum[ClustNum$degree == 1, i]
BG <- ClustNum[ClustNum$degree == 0, i]
ROC[[i-5]] <- roc.curve(FG, BG, curve = T)
PR[[i-5]] <- pr.curve(FG, BG, curve = T)
}
ROC
[[1]]
ROC[[1]]
ROC[[2]]
ROC[[3]]
ROC[[1]]$auc
c(ROC[[1]]$auc, ROC[[2]]$auc, ROC[[3]]$auc, ROC[[4]]$auc)
c(PR[[1]]$auc.integral, ROC[[2]]$auc.integral, ROC[[3]]$auc.integral, ROC[[4]]$auc.integral)
c(PR[[1]]$auc.integral, PR[[2]]$auc.integral, PR[[3]]$auc.integral, PR[[4]]$auc.integral)
par(mar=c(0,0,0,0))
plot(graph,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = V(g)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.width = E(g)$width, # change width of edge
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20" # change edge color to grey
)
tiesSum = apply(g[], 1, sum)
# condition size based on # of ties
V(g)$size <- sqrt(tiesSum + 1)
# only label if # ties greater than 10
V(g)$label <- ifelse(tiesSum>=10, V(g)$name, NA )
# color
colnames(g[])
viridis(20) # Find your color here
bcols <- c(rep("#C7E020FF", 22), "#FDE725FF", rep("#C7E020FF", 3), "#FDE725FF", rep("#C7E020FF", 9))
# --------------------------------------
par(mar=c(0,0,0,0))
plot(g,
vertex.label=V(g)$label,
vertex.size=(V(g)$size)^2,
vertex.color = bcols, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.width = sqrt(E(g)$weight), # change width of edge
edge.arrow.size = .25,
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey60", # change edge color to grey
layout=layout_on_grid
)
tiesSum = apply(graph[], 1, sum)
# condition size based on # of ties
V(graph)$size <- sqrt(tiesSum + 1)
# only label if # ties greater than 10
V(graph)$label <- ifelse(tiesSum>=10, V(graph)$name, NA )
# color
colnames(graph[])
viridis(20) # Find your color here
bcols <- c(rep("#C7E020FF", 22), "#FDE725FF", rep("#C7E020FF", 3), "#FDE725FF", rep("#C7E020FF", 9))
# --------------------------------------
par(mar=c(0,0,0,0))
plot(graph,
vertex.label=V(g)$label,
vertex.size=(V(g)$size)^2,
vertex.color = bcols, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.width = sqrt(E(g)$weight), # change width of edge
edge.arrow.size = .25,
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey60", # change edge color to grey
layout=layout_on_grid
)
library('viridis')
tiesSum = apply(graph[], 1, sum)
tiesSum
tiesSum = apply(graph[], 1, sum)
# condition size based on # of ties
V(graph)$size <- sqrt(tiesSum + 1)
# only label if # ties greater than 10
V(graph)$label <- ifelse(tiesSum>=1, V(graph)$name, NA )
# color
colnames(graph[])
viridis(20) # Find your color here
bcols <- c(rep("#C7E020FF", 22), "#FDE725FF", rep("#C7E020FF", 3), "#FDE725FF", rep("#C7E020FF", 9))
# --------------------------------------
par(mar=c(0,0,0,0))
plot(graph,
vertex.label=V(g)$label,
vertex.size=V(g)$size,
vertex.color = bcols, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.width = sqrt(E(g)$weight), # change width of edge
edge.arrow.size = .25,
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey60", # change edge color to grey
layout=layout_on_grid
)
V(graph)$name
par(mar=c(0,0,0,0))
plot(graph,
vertex.label=V(graph)$name,
vertex.size=V(g)$size,
vertex.color = bcols, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.width = sqrt(E(g)$weight), # change width of edge
edge.arrow.size = .25,
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey60", # change edge color to grey
layout=layout_on_grid
)
par(mar=c(0,0,0,0))
plot(graph,
vertex.label=V(graph)$name,
vertex.size=V(graph)$size,
vertex.color = bcols, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.width = sqrt(E(g)$weight), # change width of edge
edge.arrow.size = .25,
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey60", # change edge color to grey
layout=layout_on_grid
)
par(mar=c(0,0,0,0))
plot(graph,
vertex.label=V(graph)$name,
vertex.size=V(graph)$size,
vertex.color = bcols, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.arrow.size = .25,
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey60", # change edge color to grey
layout=layout_on_grid
)
bcols
par(mar=c(0,0,0,0))
plot(graph,
vertex.label=V(graph)$name,
vertex.size=5*V(graph)$size,
vertex.color = bcols, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.arrow.size = .25,
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey60", # change edge color to grey
layout=layout_on_grid
)
bcols <- c(rep("blue", 22), "yellow", rep("blue", 3), "yellow", rep("blue", 9))
par(mar=c(0,0,0,0))
plot(graph,
vertex.label=V(graph)$name,
vertex.size=5*V(graph)$size,
vertex.color = bcols, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.arrow.size = .25,
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey60", # change edge color to grey
layout=layout_on_grid
)
V(graph)$name
bcols <- c(rep("blue", 16), "yellow", rep("blue", 3), "yellow", rep("blue", 16))
par(mar=c(0,0,0,0))
par(mar=c(0,0,0,0))
plot(graph,
vertex.label=V(graph)$name,
vertex.size=5*V(graph)$size,
vertex.color = bcols, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.arrow.size = .25,
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey60", # change edge color to grey
layout=layout_on_grid
)
